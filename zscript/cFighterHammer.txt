class cHammer : cWeapon replaces FWeapHammer {
	Default {
		Inventory.RestrictedTo "cFighterPlayer";
		Weapon.AmmoType1 "Mana2";
		Weapon.AmmoUse1 5;
		Weapon.AmmoGive1 0;
		+WEAPON.AMMO_OPTIONAL
		Weapon.YAdjust -10;
		Weapon.BobStyle "Smooth";
		Weapon.BobSpeed 1.4;
		Weapon.BobRangeX 1.0;
		Weapon.BobRangeY 1.0;
		Weapon.SelectionOrder 900;
		+WEAPON.MELEEWEAPON
		Inventory.PickupMessage "$TXT_WEAPON_F3";
		Obituary "$OB_MPFWEAPHAMMERM";
		Tag "$TAG_FWEAPHAMMER";
	}
	
	const HAMMER_DAMAGE = 70;
	
	States {
	Spawn:
		WFHM A -1;
		Stop;
	Select:
		TNT1 A 0 A_SetCrosshair(52);
		FHMR A 1 A_Raise(SELECT_SPEED);
		Wait;
	Deselect:
		FHMR A 1 A_Lower(SELECT_SPEED);
		Wait;
	Ready:
		FHMR A 1 A_WeaponReady();
		Loop;
	Fire:
		FHMR B 3 Offset (20, 38);
		FHMR B 3 Offset (12, 22);
		FHMR B 5 Offset (1, 0);
		FHMR C 3 Offset (35, 30) A_PlaySound("FighterGrunt", CHAN_VOICE);
		FHMR C 2 Offset (6, 65) HammerAttack();
		FHMR D 2 Offset (36, 30);
		FHMR E 2 Offset (36, 30) HammerThrow();
		FHMR E 3 Offset (27, 61);
		TNT1 A 14;
		FHMR A 2 Offset (11, 80);
		FHMR A 2 Offset (7, 68);
		FHMR A 1 Offset (4, 56);
		FHMR A 1 Offset (2, 44);
		FHMR A 1 Offset (1, 34);
		Goto Ready;
	}
	
	action void HammerAttack() {
		if (player == null) return;
		
		WeaponShake(2, 6);
		
		Actor victim, puff;
		[victim, puff] = MeleeAttack(RandomizeDamage(HAMMER_DAMAGE), MELEERANGE_SHORT, 6, 12, "cHammerPuff");
		
		if (victim || puff) {
			A_AlertMonsters(ALERT_DIST_NORM);
			weaponSpecial = false; // Don't throw a hammer
		} else {
			A_AlertMonsters(ALERT_DIST_NEAR);
			weaponSpecial = true; // Prepare to throw a hammer
		}
	}
	
	action void HammerThrow() {
		if (player == null) return;
		
		if (!weaponSpecial) return;
		
		Weapon weap = player.readyWeapon;
		if (weap != null) {
			if (!weap.CheckAmmo(weap.bAltFire ? weap.altFire : weap.primaryFire, false, true)) return;
			if (!weap.DepleteAmmo(weap.bAltFire, false)) return;
		} else {
			return;
		}
		
		A_FireProjectile("cHammerMissile", 0, false, 0, 0);
	}
}

class cHammerMissile : HammerMissile {
	const blastDamage = 80.0;
	const noBlastDamage = 45.0;
	
	Default {
		Radius 10;
		Height 14;
		DamageFunction 45;
		Speed 30;
		Decal "Scorch";
		+HITTRACER
	}
	
	States {
	Spawn:
		FHFX A 2 Bright Light("ThrownHammer");
		FHFX B 2 Bright Light("ThrownHammer") A_PlaySound("FighterHammerContinuous");
		FHFX CDEFGH 2 Bright Light("ThrownHammer");
		Loop;
	Death:
		TNT1 A 14 {
			if (tracer && tracer.bNORADIUSDMG) {
				A_DamageTracer(noBlastDamage, 'none', DMSS_AFFECTARMOR);
			}
			A_Explode(blastDamage, 128, XF_NOSPLASH);
			A_SpawnItemEx("cHammerBlast");
			A_Quake(2, 14, 0, 120, "");
		}
		Stop;
	}
}

class cHammerBlast : Actor {
	Default {
		+NOINTERACTION
		+NOBLOCKMAP
		+FORCEXYBILLBOARD
	}
	
	States {
	Spawn:
		FHFX IJKL 3 Bright Light("HammerBlast1");
		FHFX MNO 3 Bright Light("HammerBlast2");
		FHFX PQR 3 Bright Light("HammerBlast3");
		Stop;
	}
}

// Puff
class cHammerPuff : cPuff {
	Default {
		RenderStyle "Translucent";
		Alpha 0.5;		
		+FORCEXYBILLBOARD
		SeeSound "FighterHammerHitThing";
		AttackSound "FighterHammerHitWall";
		ActiveSound "FighterHammerMiss";
	}
	
	States {
	Spawn:
		FHFX ST 3;
		FHFX UVW 4 A_FadeOut(0.1);
		Stop;
	}
}
