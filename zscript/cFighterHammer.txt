class cHammer : FWeapHammer replaces FWeapHammer {
	const HAMMER_RANGE = 64.0;
	const HAMMER_DAMAGE = 70;
	
	Default {
		Weapon.AmmoUse1 5;
		Weapon.AmmoGive1 0;
		Weapon.BobStyle "Smooth";
		Weapon.BobRangeX 1.0;
		Weapon.BobRangeY 1.0;
		Weapon.BobSpeed 1.4;
		-BLOODSPLATTER
		+WEAPON.NOAUTOAIM
		+WEAPON.NOALERT
		+INVENTORY.RESTRICTABSOLUTELY
	}
	
	States {
	Select:
		TNT1 A 0 A_SetCrosshair(52);
		FHMR A 1 A_Raise(15);
		Wait;
	Deselect:
		FHMR A 1 A_Lower(15);
		Wait;
	Fire:
		FHMR B 3 Offset (20, 38);
		FHMR B 3 Offset (12, 22);
		FHMR B 5 Offset (1, 0);
		FHMR C 3 Offset (35, 30) {
			A_PlaySound("FighterGrunt", CHAN_VOICE);;
		}
		FHMR C 2 Offset (6, 65) HammerAttack();
		FHMR D 2 Offset (36, 30);
		FHMR E 2 Offset (36, 30) HammerThrow();
		FHMR E 3 Offset (27, 61);
		TNT1 A 14;
		FHMR A 2 Offset (11, 80);
		FHMR A 2 Offset (7, 68);
		FHMR A 1 Offset (4, 56);
		FHMR A 1 Offset (2, 44);
		FHMR A 1 Offset (1, 34);
		Goto Ready;
	}
	
	action void HammerAttack() {
		if (player == null) return;
		
		int dam = int( HAMMER_DAMAGE * frandom[HammerDamage](0.9,1.1) );
		if (FindInventory("PowerInvulnerable")) dam *= 2;
		if(GetCVar("weapon_shake")) A_Quake(2, 6, 0, 1, "");
		
		// Try to hit an actor nearby
		FTranslatedLineTarget t;
		for (int i=0; i<=12; i=(i>0 ? -i : -i+2) ) {
			if (LineAttack(angle + i, HAMMER_RANGE, pitch, dam, "Melee", "cHammerPuff", 0, t)) {
				if(t.linetarget != null) {
					if(t.linetarget.mass < LARGE_MASS && !t.linetarget.bDontThrust) {
						if(t.linetarget.bIsMonster) {
							t.linetarget.Thrust(6, t.attackAngleFromSource);
						}
					}
				}
				A_AlertMonsters(1500);
				weaponspecial = false; // Don't throw a hammer
				return;
			}
		}
		A_AlertMonsters(120);
		weaponspecial = true; // Prepare to throw a hammer
		return;
	}
	
	action void HammerThrow() {
		if (player == null) return;
		
		if (!weaponspecial) return;
		
		Weapon weapon = player.ReadyWeapon;
		if (weapon != null) {
			if (!weapon.CheckAmmo(weapon.bAltFire ? weapon.AltFire : weapon.PrimaryFire, false, true)) return;
			if (!weapon.DepleteAmmo(weapon.bAltFire, false)) return;
		} else {
			return;
		}
		
		A_FireProjectile("cHammerMissile", 0, false, 0, 0);
	}
	
}

class cHammerMissile : HammerMissile {
	const blastDamage = 80.0;
	const noBlastDamage = 45.0;
	
	Default {
		Radius 10;
		Height 14;
		DamageFunction 45;
		Speed 30;
		Decal "Scorch";
		+HITTRACER
	}
	
	States {
	Spawn:
		FHFX A 2 Bright Light("ThrownHammer");
		FHFX B 2 Bright Light("ThrownHammer") A_PlaySound("FighterHammerContinuous");
		FHFX CDEFGH 2 Bright Light("ThrownHammer");
		Loop;
	Death:
		TNT1 A 14 {
			if (tracer && tracer.bNORADIUSDMG) {
				A_DamageTracer(noBlastDamage, 'none', DMSS_AFFECTARMOR);
			}
			A_Explode(blastDamage, 128, XF_NOSPLASH);
			A_AlertMonsters(1500);
			A_SpawnItemEx("cHammerBlast");
			A_Quake(2, 14, 0, 120, "");
		}
		Stop;
	}
}

class cHammerBlast : Actor {
	Default {
		+NOINTERACTION
		+NOBLOCKMAP
		+FORCEXYBILLBOARD
	}
	
	States {
	Spawn:
		FHFX IJKL 3 Bright Light("HammerBlast1");
		FHFX MNO 3 Bright Light("HammerBlast2");
		FHFX PQR 3 Bright Light("HammerBlast3");
		Stop;
	}
}

// Puff
class cHammerPuff : cPuff {
	Default {
		RenderStyle "Translucent";
		Alpha 0.5;		
		+FORCEXYBILLBOARD
		SeeSound "FighterHammerHitThing";
		AttackSound "FighterHammerHitWall";
		ActiveSound "FighterHammerMiss";
	}
	
	States {
	Spawn:
		FHFX ST 3;
		FHFX UVW 4 A_FadeOut(0.1);
		Stop;
	}
}
