class cFrostShards : cWeapon replaces MWeapFrost {
	Default {
		Inventory.RestrictedTo "cMagePlayer";
		Weapon.AmmoType1 "Mana1";
		Weapon.AmmoUse1 1;
		Weapon.AmmoGive1 25;
		+BLOODSPLATTER
		Weapon.YAdjust 18;
		Weapon.BobStyle "Smooth";
		Weapon.BobSpeed 1.4;
		Weapon.BobRangeX 1.0;
		Weapon.BobRangeY 0.7;
		Weapon.SelectionOrder 1700;
		Inventory.PickupMessage "$TXT_WEAPON_M2";
		Obituary "$OB_MPMWEAPFROST";
		Tag "$TAG_MWEAPFROST";
	}
	
	States {
	Spawn:
		WMCS A 7 Bright Light("FrostShardsWeapon1");
		WMCS B 7 Bright Light("FrostShardsWeapon2");
		WMCS C 7 Bright Light("FrostShardsWeapon3");
		WMCS B 7 Bright Light("FrostShardsWeapon2");
		Loop;
	Select:
		TNT1 A 0 A_SetCrosshair(59);
		CONE A 1 A_Raise(SELECT_SPEED);
		Wait;
	Deselect:
		CONE A 1 A_Lower(SELECT_SPEED);
		Wait;
	Ready:
		CONE A 1 A_WeaponReady();
		Loop;
	Fire:
		CONE B 4 { invoker.special1 = 0; }
		CONE C 2;
	Hold:
		CONE C 2 A_PlaySound("IceGuyAttack", CHAN_WEAPON, 0.6);
		CONE D 2;
		CONE E 1;
		CONE E 2 FrostShardFire();
		CONE D 1;
		CONE C 2 {
			if (invoker.special1 > 15 && random[FrostShardCooldown]() < invoker.special1) {
				invoker.special1 = 0;
				return invoker.ResolveState('Cooldown');
			}
			A_ReFire();
			return state(null);
		}
		CONE F 3;
		CONE G 4;
		Goto Ready;
	Cooldown:
		CONE F 7 A_PlaySound("*pain", CHAN_VOICE);
		CONE G 5 A_ClearReFire();
		CONE A 5;
		Goto Ready;
	AltFire:
		CONE H 2 Offset(-17, 78);
		CONE H 2 Offset(-11, 51);
		CONE H 3 Offset(-4, 41);
		CONE H 4 Offset(1, 33);
		CONE I 5 Offset(-1, 34) FrostShardShatter();
		CONE I 3 Offset(-4, 41);
		CONE I 2 Offset(-7, 55);
		CONE I 2 Offset(-16, 82);
		Goto Ready;
	}
	
	action void FrostShardFire() {
		Weapon weap = player.readyWeapon;
		if (!weap.DepleteAmmo(weap.bAltFire)) return;
		
		Vector2 spread = GetSpreadRect(1.8, 0.4);
		FireAdjustedMissile("cFrostShardMissile", spread.x, spread.y);
		
		A_AlertMonsters(ALERT_DIST_NORM);
		invoker.special1++;
	}
	
	const SHATTER_RANGE = 1200;
	
	action void FrostShardShatter() {
		A_PlaySound("FingerSnap", CHAN_WEAPON);
		
		bool thanosMode = CVar.FindCVar('sv_thanosdidnothingwrong').GetBool();
		Actor mo;
		let iterator = ThinkerIterator.Create("Actor", SHATTER_RANGE);
		while (mo = Actor(iterator.Next())) {
			if (mo == self) continue;
			
			if (thanosMode) {
				if (random[PerfectlyBalanced](0,1)) {
					if (mo.bISMONSTER) {
						if (mo.special) mo.A_CallSpecial(mo.special, mo.args[0], mo.args[1], mo.args[2], mo.args[3], mo.args[4]);
						mo.Destroy();
					} else if (mo.player) {
						mo.A_Die();
					}
				}
				continue;
			}
			
			if (mo.bICECORPSE && (mo.bISMONSTER || mo.player)) {
				if (Distance2D(mo) > SHATTER_RANGE) continue;	// Distance check
				if (!CheckSight(mo)) continue;	// Line of sight check
				
				mo.DamageMobj(self, self, 0, 'None');
			}
		}
	}
}

class cFrostShardMissile : Actor {
	Default {
		Radius 8;
		Height 8;
		DamageFunction cWeapon.RandomizeDamage(22);
		Speed 45;
		Projectile;
		DamageType "Ice";
		DeathSound "MageShardsExplode";
		Obituary "$OB_MPMWEAPFROST";
	}
	
	States {
	Spawn:
		SHRD ABC 4 Bright Light("FrostShard1");
		Loop;
	Death:
		TNT1 A 0 Spawn("cFrostShotPuff", pos);
		Stop;
	}
}

class cFrostShotPuff : Actor {
	Default {
		RenderStyle "Translucent";
		Alpha 0.8;
		+NOINTERACTION
		+NOBLOCKMAP
		+FORCEXYBILLBOARD
	}
	
	States {
	Spawn:
		SHEX AB 3 Light("FrostShard1");
		SHEX CDE 4 Light("FrostShard2");
		Stop;
	}
}
