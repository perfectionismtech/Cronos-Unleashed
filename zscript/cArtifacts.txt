class cCrystalVial : CrystalVial replaces CrystalVial {
	Default {
		Radius 12;
		Height PICKUP_HEIGHT;
		+INVENTORY.NOSCREENFLASH
	}
	
	States {
	Spawn:
		PTN1 AAABCD 9 Light("CrystalVialItem") DoSpawnParticle();
		Loop;
	}
	
	void DoSpawnParticle() {
		A_SpawnParticle("0055FF", 0, 70, 2, 0, 
			frandom(-4,4), frandom(-4,4), 30, 
			frandom(-0.1,0.1), frandom(-0.1,0.1), 0, 
			0, 0, 0.015);
	}
	
	override bool TryPickup(in out Actor other) {
		bool pickup = Super.TryPickup(other);
		if (pickup) {
			if (other.GetCVar("healing_flash")) {
				other.A_SetBlend("0D78DB", 0.2, 20);
			} else {
				// Play the regular flash
				other.player.bonuscount = BONUSADD;
			}
		}
		return pickup;
	}
}

class cQuartzFlask : ArtiHealth replaces ArtiHealth {
	Default {
		Radius PICKUP_RADIUS;
		Height PICKUP_HEIGHT;
		Inventory.PickupFlash "";
		-INVENTORY.FANCYPICKUPSOUND
		-INVENTORY.INVBAR
		-COUNTITEM
		Inventory.PickupSound "misc/i_pkup";
	}
	
	States {
	Spawn:
		PTN2 A 9 Light("QuartzFlaskItem") DoSpawnParticle();
		Loop;
	}
	
	void DoSpawnParticle() {
		A_SpawnParticle("BE34E8", 0, 70, 3, 0, 
			frandom(-8, 8), frandom(-8, 8), 26, 
			frandom(-.1, .1), frandom(-.1, .1), 0, 
			0, 0, 0.01);
	}
	
	override bool Use(bool pickup) {
		if (owner.Health <= 0 || owner.Health >= PlayerPawn(owner).GetMaxHealth()) {
			return false;
		}
		if (owner.CheckInventory("cQuartzRegen", 1)) {
			return false;
		}
		
		owner.A_GiveInventory("cQuartzRegen");
		if (owner.GetCVar("healing_flash")) owner.A_SetBlend("D266EC", 0.3, 20);
		return true;
	}
}

class cQuartzRegen : Powerup {
	Default {
		Powerup.Duration 50;
	}
	
	override void DoEffect() {
		Super.DoEffect();
		if (owner != null && owner.health > 0 && (level.time & 1) == 0) {
			owner.GiveBody(1);
		}
		if (owner.Health >= PlayerPawn(owner).GetMaxHealth()) {
			Destroy();
		}
	}
}

class cRepulsionDisc : Inventory replaces ArtiBlastRadius {
	Default {
		Radius PICKUP_RADIUS;
		Height PICKUP_HEIGHT;
		-COUNTITEM
		+FLOATBOB
		Inventory.DefMaxAmount;
		Inventory.Icon "ARTIBLST";
		Inventory.PickupSound "misc/i_pkup";
		Inventory.PickupMessage "$TXT_ARTIBLASTRADIUS";
		Tag "$TAG_ARTIBLASTRADIUS";
	}
	
	States {
	Spawn:
		BLST ABCDEFGH 4 Bright Light("RepulsionItem");
		Loop;
	}
	
	const BLAST_RADIUS = 150;
	const MISSILE_BLAST_RADIUS = 250;
	const BLAST_SPEED = 12;
	
	override bool Use(bool pickup) {
		if (owner == null) return false;
		
		owner.A_AlertMonsters(BLAST_RADIUS);
		owner.A_PlaySound("BlastRadius", CHAN_AUTO);
		
		Actor mo;
		let iterator = ThinkerIterator.Create("Actor");
		while ((mo = Actor(iterator.Next()))) {
			if (mo == owner) continue;
			if (mo.bDONTBLAST || mo.bDORMANT || mo.bBOSS ) continue;
			
			// Always blast frozen corpses or actors with the explicit flag
			if (!mo.bCANBLAST && !mo.bICECORPSE) {
				// Don't blast corpses
				if (mo.bISMONSTER && mo.health <= 0) continue;
				// Very specific check from gzdoom.pk3
				if (!mo.player && !mo.bMISSILE && !mo.bISMONSTER && !mo.bCANBLAST && !mo.bTOUCHY && !mo.bVULNERABLE) continue;
			}
			// Don't blast your own missiles
			if (mo.bMISSILE && mo.target && mo.target == owner) continue;
			// Distance check
			if (owner.Distance2D(mo) > (mo.bMISSILE ? MISSILE_BLAST_RADIUS : BLAST_RADIUS)) continue;
			// Line of sight check
			if (mo.curSector.portalGroup != curSector.portalGroup && !owner.CheckSight(mo)) continue;
			
			// Check the actor's SpecialBlastHandling
			if (!mo.SpecialBlastHandling(owner, 255)) continue;
			
			double angTo = owner.AngleTo(mo);
			
			mo.vel.xy = owner.AngleToVector(angTo, BLAST_SPEED);
			if (mo.bMISSILE) {
				mo.vel.z *= -1;
			} else {
				mo.vel.z = 700.0 / mo.mass;
			}
			
			// Spawn blast effect
			Vector3 effPos = mo.pos + AngleToVector(angTo - 180.0, mo.radius + 1);
			effPos.z += mo.height/2 - mo.floorClip;
			Actor effect = Spawn('BlastEffect', effPos);
			if (effect) {
				effect.vel.xy = mo.vel.xy;
			}
			
			// Set the BLASTED flag to do damage
			if (!mo.player) {
				mo.bBLASTED = true;
			}
			
			// Kill Touchy actors when blasted
			if (mo.bTOUCHY) {
				mo.bARMED = false;
				mo.DamageMobj(owner, owner, mo.health, 'Melee', DMG_FORCED|DMG_EXPLOSION);
			}
		}
		
		return true;
	}
}

class cMysticUrn : Inventory replaces ArtiSuperHealth {
	Default {
		Radius PICKUP_RADIUS;
		Height PICKUP_HEIGHT;
		+NOGRAVITY
		+FLOATBOB
		+COUNTITEM
		+INVENTORY.INVBAR;
		+INVENTORY.FANCYPICKUPSOUND;
		Inventory.DefMaxAmount;
		Inventory.Icon "ARTISPHL";
		Inventory.PickupFlash "PickupFlash";
		Inventory.PickupSound "misc/p_pkup";
		Inventory.PickupMessage "$TXT_ARTISUPERHEALTH";
		Tag "$TAG_ARTISUPERHEALTH";
	}
	
	States {
	Spawn:
		SPHL A -1;
		Stop;
	}
	
	override bool Use(bool pickup) {
		if (owner == null) return false;
		
		if (owner.health <= 100) {
			owner.GiveBody(100, 200);
			if (owner.GetCVar("healing_flash")) owner.A_SetBlend("FFF39D", 0.5, 20);
			return true;
		} else {
			return false;
		}
	}
}

class cIconDefender: ArtiInvulnerability2 replaces ArtiInvulnerability2 {
	Default {
		Radius PICKUP_RADIUS;
		Height PICKUP_HEIGHT;
		Powerup.Type "cDefenderInvulnerability";
	}
	
	States {
	Spawn:
		DEFN ABCD 4 Bright Light("IconItem");
		Loop;
	}
}

class cDefenderInvulnerability : Powerup {
	Default {
		Powerup.Duration -20;
		Inventory.Icon "SPSHLD0";
	}
	
	override void InitEffect() {
		Super.InitEffect();
		
		if (owner is "PlayerPawn") {
			mode = PlayerPawn(owner).invulMode;
		}
		
		owner.bRESPAWNINVUL = false;
		owner.bINVULNERABLE = true;
		
		switch (mode) {
		case 'Berserk':
			owner.A_SetBlend("ff0000", 0.3, 150);
			break;
		
		case 'Ghost':
			owner.bNONSHOOTABLE = true;
			if (!owner.bSHADOW) {
				owner.A_SetRenderStyle(0.1, STYLE_Translucent);
			}
			break;
		
		case 'Reflective':
			owner.bREFLECTIVE = true;
			break;
		}
	}
	
	override void EndEffect() {
		Super.EndEffect();
		
		if (owner == null) return;
		
		owner.bRESPAWNINVUL = false;
		owner.bINVULNERABLE = false;
		
		switch (mode) {
		case 'Ghost':
			owner.bNONSHOOTABLE = false;
			if (!owner.bSHADOW) {
				owner.A_SetRenderStyle(1.0, STYLE_Normal);
			}
			break;
		
		case 'Reflective':
			owner.bREFLECTIVE = false;
			break;
		}
	}
	
	override void AlterWeaponSprite(VisStyle vis, in out int changed) {
		if (owner == null) return;
		
		if (mode == 'Ghost' && !owner.bSHADOW) {
			vis.alpha = 0.2;
		}
	}
}

class cDragonskinBracers : ArtiBoostArmor replaces ArtiBoostArmor {
	Default {
		Radius PICKUP_RADIUS;
		Height PICKUP_HEIGHT;
	}
	
	States {
	Spawn:
		BRAC ABCDEFGH 6 Bright Light("BracerItem");
		Loop;
	}
}

class cBootsOfSpeed : ArtiSpeedBoots replaces ArtiSpeedBoots {
	Default {
		Radius PICKUP_RADIUS;
		Height PICKUP_HEIGHT;
		Powerup.Type "cPowerSpeedBoots";
	}
	
	States {
	Spawn:
		SPED ABCDEFGH 3 Bright Light("BootItem");
		Loop;
	}
}

class cPowerSpeedBoots : PowerSpeed {
	Default {
		Powerup.Duration -65;
		Speed 1.6;
	}
}

class cTorch : ArtiTorch replaces ArtiTorch {
	Default {
		Radius PICKUP_RADIUS;
		Height PICKUP_HEIGHT;
	}
	
	States {
	Spawn:
		TRCH ABC 3 Bright Light("TorchItem");
		Loop;
	}
	
	override bool Use(bool pickup) {
		if (!GetCVar("classic_torch")) {
			PowerupType = "cPowerTorch";
		} else {
			PowerupType = "PowerTorch";
		}
		
		return Super.Use(pickup);
	}
}

class cPowerTorch : Powerup {
	cTorchLight light;
	
	Default {
		Powerup.Duration -120;
	}
	
	override void InitEffect() {
		Super.InitEffect();
		
		if (owner) owner.GiveInventoryType("cTorchCancel");
	}
	
	override void DoEffect() {
		Super.DoEffect();
		
		if (!light) {
			light = cTorchLight(Spawn("cTorchLight"));
			//light.target = owner; https://forum.zdoom.org/viewtopic.php?t=59923
			light.master = owner;
		}
		
		light.bDORMANT = isBlinking();
	}
	
	override void EndEffect() {
		Super.EndEffect();
		
		if (light) light.Destroy();
		if (owner) owner.TakeInventory("cTorchCancel", 1);
	}
}

class cTorchCancel : Inventory {
	Default {
		Inventory.Icon "ARTITRCX";
		Tag "Cancel Torch";
		+INVENTORY.INVBAR
		+INVENTORY.UNTOSSABLE
	}
	
	override bool Use(bool pickup) {
		owner.TakeInventory("cPowerTorch", 1); // This also calls EndEffect
		return true;
	}
}

class cTorchLight : cPlayerLight {
	Default {
		Args 120, 105, 80, 300, 390;
		DynamicLight.Type "RandomFlicker";
		+DYNAMICLIGHT.DONTLIGHTSELF
	}
	
	override void PostBeginPlay() {
		Super.PostBeginPlay();
		specialf1 = 3;
	}
}

class cWingsOfWrath : ArtiFly replaces ArtiFly {
	Default {
		Radius PICKUP_RADIUS;
		Height PICKUP_HEIGHT;
		Inventory.MaxAmount 0;
		+INVENTORY.AUTOACTIVATE
		-COUNTITEM
	}
}

class cMana1 : Mana1 replaces Mana1 {
	Default {
		Radius PICKUP_RADIUS;
		Height PICKUP_HEIGHT;
	}
	
	States {
	Spawn:
		MAN1 ABCDEFGHI 4 Bright Light("BlueMana");
		Loop;
	}
}

class cMana2 : Mana2 replaces Mana2 {
	Default {
		Radius PICKUP_RADIUS;
		Height PICKUP_HEIGHT;
		+FORCEXYBILLBOARD
	}
	
	States {
	Spawn:
		MAN2 ABCDEFGHIJKLMNOP 4 Bright Light("GreenMana");
		Loop;
	}
}

class cMana3 : Mana3 replaces Mana3 {
	Default {
		Radius PICKUP_RADIUS;
		Height PICKUP_HEIGHT;
		+FORCEXYBILLBOARD
	}
	
	States {
	Spawn:
		MAN3 ABCDEFGHIJKLMNOP 4 Bright Light("RedMana");
		Loop;
	}
}

class cMana4 : Inventory {
	Default {
		Radius PICKUP_RADIUS;
		Height PICKUP_HEIGHT;
		+FORCEXYBILLBOARD
		+COUNTITEM
		+FLOATBOB
		+INVENTORY.INVBAR
		Inventory.PickupFlash "PickupFlash";
		+INVENTORY.FANCYPICKUPSOUND
		Inventory.DefMaxAmount;
		Inventory.Icon "ARTIMAN4";
		Inventory.PickupSound "misc/p_pkup";
		Inventory.PickupMessage "Purple Mana";
		Tag "Purple Mana";
	}
	
	States {
	Spawn:
		MAN4 ABCDEFGHIJKLMNOP 4 Bright Light("PurpleMana");
		Loop;
	}
	
	override bool Use (bool pickup) {
		return false;
	}
}
