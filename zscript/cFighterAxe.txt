class cAxe : cWeapon replaces FWeapAxe {
	Default {
		Inventory.RestrictedTo "cFighterPlayer";
		Weapon.AmmoType1 "Mana1";
		Weapon.AmmoUse1 3;
		Weapon.AmmoGive1 0;
		+WEAPON.AMMO_OPTIONAL
		+WEAPON.AXEBLOOD
		-BLOODSPLATTER
		Weapon.YAdjust -12;
		Weapon.BobStyle "Smooth";
		Weapon.BobSpeed 1.4;
		Weapon.BobRangeX 0.8;
		Weapon.BobRangeY 1.0;
		Weapon.SelectionOrder 1500;
		+WEAPON.MELEEWEAPON
		Inventory.PickupMessage "$TXT_WEAPON_F2";
		Obituary "$OB_MPFWEAPAXE";
		Tag "$TAG_FWEAPAXE";
	}
	
	const EMPTY_DAMAGE = 40;
	const CHARGED_DAMAGE = 64;
	const QUICKPUNCH_DAMAGE = 24;
	
	States {
	Spawn:
		WFAX A -1;
		Stop;
	Select:
		TNT1 A 0 A_SetCrosshair(51);
		TNT1 A 0 SpawnWeaponLight("cAxeLight");
		FAXE A 1 A_Raise(SELECT_SPEED);
		Wait;
	Select.Glow:
		TNT1 A 0 A_SetCrosshair(51);
		TNT1 A 0 SpawnWeaponLight("cAxeLight");
		FAXE L 1 Bright A_Raise(SELECT_SPEED);
		Wait;
	Deselect:
		FAXE A 1 A_Lower(SELECT_SPEED);
		Wait;
	Deselect.Glow:
		FAXE L 1 Bright A_Lower(SELECT_SPEED);
		Wait;
	Ready:
		FAXE A 1 AxeWeapReady();
		Loop;
	Ready.Glow:
		FAXE MMMMMMMMMMMMMMMM 1 Bright AxeWeapReady();
		FAXE LLL 1 Bright AxeWeapReady();
		FAXE MMMMMMMMMMM 1 Bright AxeWeapReady();
		FAXE LLL 1 Bright AxeWeapReady();
		FAXE MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM 1 Bright AxeWeapReady();
		FAXE LLL 1 Bright AxeWeapReady();
		Loop;
	Fire:
		FAXE B 2 Offset(58, 50);
		FAXE C 2 Offset(38, 32);
		FAXE C 1 Offset(3, 59);
		FAXE D 1 Offset(31, 32) AxeAttack(false);
		FAXE D 1 Offset(10, 61);
		FAXE D 1 Offset(-9, 88);
		FAXE E 1 Offset(10, 32);
		FAXE E 1 Offset(-5, 62);
		TNT1 A 5;
		TNT1 A 4 A_AltReFire(null, "AltFire.Hold");
		TNT1 A 0 A_ReFire();
		Goto WindDown;
	Fire.Glow:
		FAXE N 2 Bright Offset(58, 50);
		FAXE O 2 Bright Offset(38, 32);
		FAXE O 1 Bright Offset(3, 59);
		FAXE P 1 Bright Offset(31, 32) AxeAttack(true);
		FAXE P 1 Bright Offset(10, 61);
		FAXE P 1 Bright Offset(-9, 88);
		FAXE Q 1 Bright Offset(10, 32);
		FAXE Q 1 Bright Offset(-5, 62);
		TNT1 A 5;
		TNT1 A 4 A_AltReFire(null, "AltFire.Hold");
		TNT1 A 0 A_ReFire();
		Goto WindDown;
	WindDown:
		FAXE A 0 {
			if (player) player.GetPSprite(PSP_WEAPON).frame = invoker.GetReadyFrame();
		}
		FAXE # 1 Offset(3, 60);
		FAXE # 1 Offset(3, 52);
		FAXE # 1 Offset(2, 44);
		FAXE # 1 Offset(2, 36);
		FAXE # 1 Offset(1, 33);
		Goto Ready;
	AltFire:
		FAXE A 1 Offset(4, 40) {
			if (player) player.GetPSprite(PSP_WEAPON).frame = invoker.GetReadyFrame();
			
			A_Overlay(2, "QuickPunch");
			A_OverlayFlags(2, PSPF_ADDWEAPON, false);
		}
		FAXE # 1 Offset(9, 52);
		FAXE # 1 Offset(14, 65);
		FAXE # 10 Offset(20, 78);
		FAXE # 3 {
			if (invoker.ammo1.amount) A_AltReFire("Fire.Glow");
			else A_AltReFire("Fire");
		}
		Goto AltWindDown;
	AltFire.Hold:
		TNT1 A 16 {
			A_Overlay(2, "QuickPunch");
			A_OverlayFlags(2, PSPF_ADDWEAPON, false);
		}
		FAXE A 1 Offset(20, 78) {
			if (player) player.GetPSprite(PSP_WEAPON).frame = invoker.GetReadyFrame();
		}
		Goto AltWindDown;
	AltWindDown:
		FAXE # 1 Offset(14, 65);
		FAXE # 1 Offset(9, 52);
		FAXE # 1 Offset(4, 40);
		FAXE # 2 A_WeaponOffset();
		Goto Ready;
	QuickPunch:
		FPCH E 2 Offset(-28, 51);
		FPCH E 1 Offset(9, 40);
		FPCH F 1 Offset(-31, 36);
		FPCH F 1 Offset(-4, 36);
		FPCH F 2 Offset(23, 38) QuickPunchAttack();
		FPCH F 1 Offset(28, 51);
		FPCH F 2 Offset(34, 74);
		FPCH F 2 Offset(39, 94);
		Stop;
	}
	
	action void AxeAttack(bool poweredAttack) {
		if (player == null) return;
		Weapon weapon = player.ReadyWeapon;
		
		int attackDamage = RandomizeDamage(poweredAttack ? CHARGED_DAMAGE : EMPTY_DAMAGE);
		class<Actor> puffType = poweredAttack ? "cAxePuffGlow" : "cAxePuff";
		
		Actor victim, puff;
		[victim, puff] = MeleeAttack(attackDamage, MELEERANGE_LONG, poweredAttack ? 5 : 2, 12, puffType);
		
		if (poweredAttack && victim && !(victim.bDORMANT || victim.bINVULNERABLE)) {
			weapon.DepleteAmmo(weapon.bAltFire);
		}
		
		if (victim || puff) {
			WeaponShake(2, 5);
			A_AlertMonsters(ALERT_DIST_NORM);
		} else {
			A_AlertMonsters(ALERT_DIST_NEAR);
		}
	}
	
	action void QuickPunchAttack() {
		if (player == null) return;
		
		Actor victim, puff;
		[victim, puff] = MeleeAttack(RandomizeDamage(QUICKPUNCH_DAMAGE), MELEERANGE_MED, 8, 10, "cPunchPuff");
		
		if (victim && !victim.bBOSS) victim.TriggerPainChance("Melee", true);
		
		if (victim || puff) {
			WeaponShake(2, 5);
			A_AlertMonsters(ALERT_DIST_NORM);
		}
	}
	
	action void AxeWeapReady() {
		if (player == null) return;
		
		Weapon weap = player.readyWeapon;
		if (weap != null) {
			if (weap.InStateSequence(player.GetPSprite(PSP_WEAPON).curState, weap.GetReadyState())) {
				A_WeaponReady();
			} else {
				player.SetPSprite(PSP_WEAPON, weap.GetReadyState());
			}
		}
	}
	
	int GetReadyFrame() {
		return ammo1.amount ? 12 /* M */ : 0 /* A */;
	}
	
	override State GetUpState() {
		return ammo1.amount ? FindState("Select.Glow") : FindState("Select");
	}
	
	override State GetDownState() {
		return ammo1.amount ? FindState("Deselect.Glow") : FindState("Deselect");
	}
	
	override State GetReadyState() {
		return ammo1.amount ? FindState("Ready.Glow") : FindState("Ready");
	}
	
	override State GetAtkState(bool hold) {
		return ammo1.amount ? FindState("Fire.Glow") : FindState("Fire");
	}
}

class cAxePuff : cPuff {
	Default {
		RenderStyle "Translucent";
		Alpha 0.6;
		+FORCEXYBILLBOARD
		SeeSound "FighterAxeHitThing";
		AttackSound "FighterHammerHitWall";
		ActiveSound "FighterHammerMiss";
	}
	
	States {
	Spawn:
		FHFX ST 4;
		FHFX UVW 4 A_FadeOut(0.2);
		Stop;
	HitBleeding:
		TNT1 A 0;
		Stop;
	HitInvulnerable:
	HitWall:
		TNT1 A 0 A_SetRenderStyle(0.7, STYLE_Add);
		MHIT A 3 SparkParticles();
		MHIT AAAA 2 A_FadeOut(0.2);
		Stop;
	}
}

class cAxePuffGlow : cPuff {
	Default {
		RenderStyle "Add";
		Alpha 1.0;
		+FORCEXYBILLBOARD
		SeeSound "FighterAxeHitThing";
		AttackSound "FighterHammerHitWall";
		ActiveSound "FighterHammerMiss";
	}
	
	States {
	Spawn:
		FAXE RS 3 Bright Light("AxeGlowPuff");
		FAXE VX 3 Bright Light("AxeGlowPuff") A_FadeOut(0.3);
		Stop;
	}
}

class cAxeLight : cPlayerLight {
	Default {
		Args 26, 26, 77, 40, 32;
		DynamicLight.Type "Flicker";
	}
	
	override void PostBeginPlay() {
		Super.PostBeginPlay();
		specialf1 = 340;
	}
	
	override void Tick() {
		Super.Tick();
		
		if(!target || !target.player || !target.player.readyWeapon ||
			target.player.readyWeapon.GetClass() != "cAxe") {
			Destroy();
		} else {
			bDORMANT = !target.CheckInventory("Mana1", 1);
		}
	}
}
