class cAxe : FWeapAxe replaces FWeapAxe {
	Actor weaponLight;
	
	const AXE_RANGE = 96.0;
	const EMPTY_DAMAGE = 40;
	const CHARGED_DAMAGE = 64;
	
	Default {
		Weapon.AmmoUse1 3;
		Weapon.AmmoGive1 0;
		Weapon.BobStyle "Smooth";
		Weapon.BobRangeX 0.8;
		Weapon.BobRangeY 1.0;
		Weapon.BobSpeed 1.4;
		-BLOODSPLATTER
		+WEAPON.NOAUTOAIM
		+WEAPON.NOALERT
		+INVENTORY.RESTRICTABSOLUTELY
	}
	
	States {
	Select:
		TNT1 A 0 A_SetCrosshair(51);
		TNT1 A 0 SpawnAxeLight();
		FAXE A 1 A_Raise(15);
		Wait;
	SelectGlow:
		TNT1 A 0 A_SetCrosshair(51);
		TNT1 A 0 SpawnAxeLight();
		FAXE L 1 Bright A_Raise(15);
		Wait;
	Deselect:
		FAXE A 1 A_Lower(15);
		Wait;
	DeselectGlow:
		FAXE L 1 Bright A_Lower(15);
		Wait;
	Ready:
		FAXE A 1 A_FAxeCheckReady();
		Loop;
	ReadyGlow:
		FAXE MMMMMMMMMMMMMMMM 1 Bright A_FAxeCheckReadyG();
		FAXE LLL 1 Bright A_FAxeCheckReadyG();
		FAXE MMMMMMMMMMM 1 Bright A_FAxeCheckReadyG();
		FAXE LLL 1 Bright A_FAxeCheckReadyG();
		FAXE MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM 1 Bright A_FAxeCheckReadyG();
		FAXE LLL 1 Bright A_FAxeCheckReadyG();
		Loop;
	Fire:
		TNT1 A 0 A_JumpIfInventory("Mana1", 1, "FireGlow");
		FAXE B 3 Offset(15, 32);
		FAXE C 3 Offset(18, 32);
		FAXE D 2 Offset(25, 32);
		FAXE D 2 Offset(-10, 82) AxeAttack(false);
		FAXE E 1 Offset(15, 32);
		FAXE E 2 Offset(10, 54);
		TNT1 A 7;
		FAXE A 1 Offset(0, 60) A_ReFire();
		FAXE A 1 Offset(0, 52);
		FAXE A 1 Offset(0, 44);
		FAXE A 1 Offset(0, 36);
		FAXE A 1;
		Goto Ready;
	FireGlow:
		FAXE N 3 Bright Offset(15, 32);
		FAXE O 3 Bright Offset(18, 32);
		FAXE P 2 Bright Offset(25, 32);
		FAXE P 2 Bright Offset(-10, 82) AxeAttack(true);
		FAXE Q 1 Bright Offset(15, 32);
		FAXE Q 2 Bright Offset(10, 54);
		TNT1 A 7;
		FAXE M 1 Bright Offset(0, 60) A_ReFire();
		FAXE M 1 Bright Offset(0, 52);
		FAXE M 1 Bright Offset(0, 44);
		FAXE M 1 Bright Offset(0, 36);
		FAXE M 1;
		Goto ReadyGlow;
	}
	
	action void AxeAttack(bool poweredAttack) {
		if (player == null) return;
		Weapon weapon = player.ReadyWeapon;
		
		int attackDamage = poweredAttack ? CHARGED_DAMAGE : EMPTY_DAMAGE;
		attackDamage = int( attackDamage * frandom[AxeDamage](0.9,1.1) );
		if (FindInventory("cDefenderInvulnerability")) attackDamage *= 2;
		
		class<Actor> puffType = poweredAttack ? "cAxePuffGlow" : "cAxePuff";
		
		FTranslatedLineTarget t;
		for (int i=0; i<=10; i=(i>0 ? -i : -i+2) ) {
			if (LineAttack(angle + i, AXE_RANGE, pitch, attackDamage, "Melee", puffType, 0, t)) {
				if(t.linetarget != null) {
					if(poweredAttack) {
						weapon.DepleteAmmo(weapon.bAltFire);
					}
					
					if(t.linetarget.mass < LARGE_MASS && !t.linetarget.bDONTTHRUST) {
						if(t.linetarget.bIsMonster) {
							t.linetarget.Thrust(3, t.attackAngleFromSource);
						}
					}
				}
				A_AlertMonsters(1500);
				
				if(GetCVar("weapon_shake")) A_Quake(2, 6, 0, 1, "");
				return;
			}
		}
		
		A_AlertMonsters(120);
		return;
	}
	
	action void SpawnAxeLight() {
		if (!invoker.weaponLight) {
			invoker.weaponLight = Spawn("cAxeLight");
			invoker.weaponLight.master = invoker.owner;
		}
	}
}

class cAxePuff : cPuff {
	Default {
		RenderStyle "Translucent";
		Alpha 0.6;
		+FORCEXYBILLBOARD
		SeeSound "FighterAxeHitThing";
		AttackSound "FighterHammerHitWall";
		ActiveSound "FighterHammerMiss";
	}
	
	States {
	Spawn:
		FHFX ST 4;
		FHFX UVW 4 A_FadeOut(0.2);
		Stop;
	HitBleeding:
		TNT1 A 0;
		Stop;
	HitInvulnerable:
	HitWall:
		TNT1 A 0 A_SetRenderStyle(0.7, STYLE_Add);
		MHIT A 3 SparkParticles();
		MHIT AAAA 2 A_FadeOut(0.2);
		Stop;
	}
}

class cAxePuffGlow : cPuff {
	Default {
		RenderStyle "Add";
		Alpha 1.0;
		+FORCEXYBILLBOARD
		SeeSound "FighterAxeHitThing";
		AttackSound "FighterHammerHitWall";
		ActiveSound "FighterHammerMiss";
	}
	
	States {
	Spawn:
		FAXE RS 3 Bright Light("AxeGlowPuff");
		FAXE VX 3 Bright Light("AxeGlowPuff") A_FadeOut(0.3);
		Stop;
	}
}

class cAxeLight : cPlayerLight {
	Default {
		Args 26, 26, 77, 40, 32;
		DynamicLight.Type "Flicker";
	}
	
	override void PostBeginPlay() {
		Super.PostBeginPlay();
		specialf1 = 340;
	}
	
	override void Tick() {
		Super.Tick();
		
		if(!master || !master.player || !master.player.ReadyWeapon ||
			master.player.ReadyWeapon.GetClass() != "cAxe") {
			Destroy();
		} else {
			bDORMANT = !master.CheckInventory("Mana1", 1);
		}
	}
}
