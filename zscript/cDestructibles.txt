class cDestructibleBit : Actor {
	Default {
		Radius 5;
		Height 5;
		+NOBLOCKMAP
		+NOTELEPORT
		+CANNOTPUSH
	}
	
	void TryCleanup() {
		for (int i = 0; i < MAXPLAYERS; i++) {
			if (!playeringame[i]) continue;
			
			Actor pmo = players[i].mo;
			if (CheckSight(pmo) && absangle(pmo.AngleTo(self), pmo.Angle) < 75) {
				return;
			}
		}
		
		Destroy();
	}
}

class cPottery1 : Pottery1 replaces cPottery1 {
	Default {
		Radius 12;
		Height 35;
		Health 5;
		RadiusDamageFactor 0.5;
	}
	
	States {
	Spawn:
		POT1 A -1;
		Stop;
	Death:
		TNT1 A 0 PotteryExplode();
		Stop;
	}
	
	void PotteryExplode() {
		A_PlaySound("PotteryExplode", CHAN_BODY);
		
		for (int i = random(4,7); i > 0; i--) {
			Actor bit = Spawn("cPotteryBit", pos);
			if (bit) {
				bit.vel = (frandom(-3,3), frandom(-3,3), frandom(4,9));
			}
		}
		
		Class<Actor> item = GetSpawnableType(args[0]);
		if (item != null) {
			if (!(level.noMonsters || sv_nomonsters) || !(GetDefaultByType(item).bISMONSTER)) {
				Spawn(item, pos, ALLOW_REPLACE);
			}
		}
	}
}

class cPottery2 : cPottery1 replaces Pottery2 {
	Default {
		Height 30;
	}
	
	States {
	Spawn:
		POT2 A -1;
		Stop;
	}
}

class cPottery3 : cPottery1 replaces Pottery3 {
	Default {
		Height 25;
	}
	
	States {
	Spawn:
		POT3 A -1;
		Stop;
	}
}

class cPotteryBit : cDestructibleBit {
	Default {
		+MISSILE
		+NOICEDEATH
	}
	
	States {
	Spawn:
		PBIT ABCDE -1;
		Stop;
	Death:
		PBIT F 0 PotteryChooseBit();
		Stop;
	Bit1:
		PBIT F 140;
		PBIT F 35 TryCleanup();
		Wait;
	Bit2:
		PBIT G 140;
		PBIT G 35 TryCleanup();
		Wait;
	Bit3:
		PBIT H 140;
		PBIT H 35 TryCleanup();
		Wait;
	Bit4:
		PBIT I 140;
		PBIT I 35 TryCleanup();
		Wait;
	Bit5:
		PBIT J 140;
		PBIT J 35 TryCleanup();
		Wait;
	}
	
	void PotteryChooseBit() {
		static const statelabel bits[] = {"Bit1", "Bit2", "Bit3", "Bit4", "Bit5"};
		SetState(FindState( bits[random() % 5] ));
	}
	
	override void PostBeginPlay() {
		Super.PostBeginPlay();
		SetState(spawnState + (random()%5));
	}
}

class cBarrel : ZBarrel replaces ZBarrel {
	Default {
		Health 70;
		+SHOOTABLE
		+NOTAUTOAIMED
		+NOBLOOD
		DeathSound "TreeBreak";
		PainSound "TreeExplode";
	}
	
	States {
	Death:
		ZBAR B -1 BarrelExplode();
		Stop;
	Burn:
		ZBAR D 9 Bright A_PlaySound("TreeExplode", CHAN_BODY);
		ZBAR E 6 Bright;
		ZBAR C -1;
		Stop;
	}
	
	void BarrelExplode() {
		A_PlaySound("TreeBreak", CHAN_BODY);
		
		int bitCount = random(6,8);
		for(int i = 0; i < bitCount; i++) {
			Actor bit = Spawn("cBarrelBit", pos+(0, 0, 10));
			if (bit) {
				bit.vel = (frandom(-2,2), frandom(-2,2), frandom(3,8));
			}
		}
	}
}

class cBarrelBit : cDestructibleBit {
	States {
	Bit1:
		BBIT A 140;
		BBIT A 35 TryCleanup();
		Wait;
	Bit2:
		BBIT B 140;
		BBIT B 35 TryCleanup();
		Wait;
	Bit3:
		BBIT C 140;
		BBIT C 35 TryCleanup();
		Wait;
	Bit4:
		BBIT D 140;
		BBIT D 35 TryCleanup();
		Wait;
	}
	
	override void PostBeginPlay() {
		Super.PostBeginPlay();
		static const statelabel bits[] = {"Bit1", "Bit2", "Bit3", "Bit4"};
		SetState(FindState( bits[random() % bits.size()] ));
	}
}

class cSuitOfArmor : ZSuitOfArmor replaces ZSuitOfArmor {
	Default {
		Health 90;
		RadiusDamageFactor 0.5;
	}
}

class cTreeDestructible : TreeDestructible replaces TreeDestructible {
	Default {
		Radius 20;
		Height 160;
		Health 70;
		RadiusDamageFactor 0.5;
	}
	
	States {
	Death:
		TNT1 A 0 A_SetSize(6);
		Goto Super::Death;
	Burn:
		TNT1 A 0 A_SetSize(6);
		Goto Super::Burn;
	}
}
